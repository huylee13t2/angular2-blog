{
  "_args": [
    [
      {
        "raw": "ng2-pagination@^2.0.1",
        "scope": null,
        "escapedName": "ng2-pagination",
        "name": "ng2-pagination",
        "rawSpec": "^2.0.1",
        "spec": ">=2.0.1 <3.0.0",
        "type": "range"
      },
      "/home/asus/HuyLee/myproject/angular2/demo/blog/tutorial/ngApp"
    ]
  ],
  "_from": "ng2-pagination@>=2.0.1 <3.0.0",
  "_id": "ng2-pagination@2.0.1",
  "_inCache": true,
  "_location": "/ng2-pagination",
  "_nodeVersion": "6.1.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/ng2-pagination-2.0.1.tgz_1487844859032_0.19549276842735708"
  },
  "_npmUser": {
    "name": "michaelbromley",
    "email": "michael@michaelbromley.co.uk"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ng2-pagination@^2.0.1",
    "scope": null,
    "escapedName": "ng2-pagination",
    "name": "ng2-pagination",
    "rawSpec": "^2.0.1",
    "spec": ">=2.0.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ng2-pagination/-/ng2-pagination-2.0.1.tgz",
  "_shasum": "eb329c0020e19a5e7bd1a6e064792fad1d8ec80e",
  "_shrinkwrap": null,
  "_spec": "ng2-pagination@^2.0.1",
  "_where": "/home/asus/HuyLee/myproject/angular2/demo/blog/tutorial/ngApp",
  "author": {
    "name": "Michael Bromley",
    "email": "michael@michaelbromley.co.uk"
  },
  "bugs": {
    "url": "https://github.com/michaelbromley/ng2-pagination/issues"
  },
  "dependencies": {},
  "deprecated": "ng2-pagination has been renamed to ngx-pagination. v2.0.1 is the final release under the name ng2-pagination. Please update!",
  "description": "Pagination for Angular",
  "devDependencies": {
    "@angular/common": "^2.4.3",
    "@angular/compiler": "^2.4.3",
    "@angular/compiler-cli": "^2.4.3",
    "@angular/core": "^2.4.3",
    "@angular/forms": "^2.4.3",
    "@angular/platform-browser": "^2.4.3",
    "@angular/platform-browser-dynamic": "^2.4.3",
    "@angular/platform-server": "^2.4.3",
    "@angular/router": "3.4.3",
    "@ngtools/webpack": "1.1.4",
    "@types/es6-shim": "^0.31.32",
    "@types/jasmine": "2.5.41",
    "@types/node": "^6.0.45",
    "angular2-template-loader": "0.6.0",
    "bulma": "0.2.3",
    "core-js": "^2.4.0",
    "css-loader": "^0.23.1",
    "es6-promise": "^3.0.2",
    "es6-shim": "^0.35.0",
    "highlight.js": "^9.1.0",
    "html-loader": "^0.4.3",
    "jasmine-core": "^2.4.1",
    "json-loader": "^0.5.4",
    "karma": "1.2.0",
    "karma-chrome-launcher": "2.0.0",
    "karma-jasmine": "1.0.2",
    "karma-mocha-reporter": "^2.2.0",
    "karma-phantomjs-launcher": "1.0.2",
    "karma-webpack": "^1.8.0",
    "marked": "^0.3.6",
    "node-sass": "^3.6.0",
    "phantomjs-prebuilt": "^2.1.7",
    "raw-loader": "^0.5.1",
    "reflect-metadata": "0.1.3",
    "rxjs": "^5.0.3",
    "sass-loader": "^3.1.2",
    "style-loader": "^0.13.1",
    "ts-loader": "^1.0.0",
    "typescript": "2.0.6",
    "webpack": "2.1.0-beta.25",
    "zone.js": "0.7.4"
  },
  "directories": {},
  "dist": {
    "shasum": "eb329c0020e19a5e7bd1a6e064792fad1d8ec80e",
    "tarball": "https://registry.npmjs.org/ng2-pagination/-/ng2-pagination-2.0.1.tgz"
  },
  "files": [
    "dist",
    "index.js",
    "index.d.ts"
  ],
  "gitHead": "ec12a1902b79c4915d902329a4b49a79dc456c5c",
  "homepage": "https://github.com/michaelbromley/ng2-pagination#readme",
  "keywords": [
    "angular",
    "angular2",
    "pagination"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "michaelbromley",
      "email": "michael@michaelbromley.co.uk"
    }
  ],
  "name": "ng2-pagination",
  "optionalDependencies": {},
  "readme": "# Pagination for Angular 2+[![Build Status](https://travis-ci.org/michaelbromley/ng2-pagination.svg?branch=master)](https://travis-ci.org/michaelbromley/ng2-pagination)\r\n\r\nThis is a port of my [angular-utils-pagination](https://github.com/michaelbromley/angularUtils/tree/master/src/directives/pagination)\r\nmodule from Angular 1.x to Angular 2. Due to fundamental differences in the design of Angular from version 2 onwards, the API is different but\r\nthe idea is the same - the most simple possible way to add full-featured pagination to an Angular app.\r\n\r\n## Demo\r\n\r\nCheck out the live demo here: http://michaelbromley.github.io/ng2-pagination/\r\n\r\nPlay with it on Plunker here: http://plnkr.co/edit/JVQMPvV8z2brCIzdG3N4?p=preview\r\n\r\n## Quick Start\r\n\r\n```\r\nnpm install ng2-pagination --save\r\n```\r\n\r\n### Angular Version\r\n\r\nThis library is built to work with **Angular 2.3.0+**, and support ahead-of-time compilation.\r\nIf you need to support an earlier or pre-release version of Angular for now, please see the changelog for advice on which version to use.\r\n\r\n### CommonJS\r\n\r\nng2-pagination ships as un-bundled CommonJS modules (located in the `dist` folder), which can be imported with \r\n`require('ng2-pagination');`, or `import` for those environments that support this method (e.g. TypeScript 1.6+).\r\n\r\n### System.register\r\n\r\nng2-pagination also ships with a bundle in the system format (`dist/ng2-pagination-bundle.js`), suitable for use with the [es6-module-loader](https://github.com/ModuleLoader/es6-module-loader) \r\nand related loaders such as SystemJS.\r\n\r\n## Simple Example\r\n\r\n```TypeScript\r\n// app.module.ts\r\nimport {NgModule} from '@angular/core';\r\nimport {BrowserModule} from '@angular/platform-browser';\r\nimport {Ng2PaginationModule} from 'ng2-pagination'; // <-- import the module\r\nimport {MyComponent} from './my.component';\r\n\r\n@NgModule({\r\n    imports: [BrowserModule, Ng2PaginationModule], // <-- include it in your app module\r\n    declarations: [MyComponent],\r\n    bootstrap: [MyComponent]\r\n})\r\nexport class MyAppModule {}\r\n```\r\n\r\n```TypeScript\r\n// my.component.ts\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'my-component',\r\n    template: `\r\n    <ul>\r\n      <li *ngFor=\"let item of collection | paginate: { itemsPerPage: 10, currentPage: p }\"> ... </li>\r\n    </ul>\r\n               \r\n    <pagination-controls (pageChange)=\"p = $event\"></pagination-controls>\r\n    `\r\n})\r\nexport class MyComponent {\r\n    public collection: any[] = someArrayOfThings;  \r\n}\r\n```\r\n\r\n## API\r\n\r\n### PaginatePipe\r\n\r\nThe PaginatePipe should be placed at the end of an NgFor expression. It accepts a single argument, an object conforming \r\nto the [`PaginationInstance` interface](/src/pagination-instance.ts). The following config options are available:\r\n\r\n```HTML\r\n<element *ngFor=\"let item of collection | paginate: { id: 'foo',\r\n                                                      itemsPerPage: pageSize,\r\n                                                      currentPage: p,\r\n                                                      totalItems: total }\">...</element>\r\n\r\n```\r\n\r\n* **`itemsPerPage`** [`number`] - **required** The number of items to display on each page.\r\n* **`currentPage`** [`number`] - **required** The current (active) page number.\r\n* **`id`** [`string`] If you need to support more than one instance of pagination at a time, set the `id` and ensure it\r\nmatches the id attribute of the `PaginationControlsComponent` / `PaginationControlsDirective` (see below).\r\n* **`totalItems`** [`number`] The total number of items in the collection. Only useful when doing server-side paging, \r\nwhere the collection size is limited to a single page returned by the server API. For in-memory paging, \r\nthis property should not be set, as it will be automatically set to the value of `collection.length`.\r\n\r\n### PaginationControlsComponent\r\n\r\nThis a default component for displaying pagination controls. It is implemented on top of the `PaginationControlsDirective`, and has a pre-set\r\ntemplate and styles based on the [Foundation 6 pagination component](http://foundation.zurb.com/sites/docs/pagination.html). If you require a more \r\ncustomised set of controls, you will need to use the `PaginationControlsDirective` and implement your own component.\r\n\r\n```HTML\r\n<pagination-controls  id=\"some_id\"\r\n                      (pageChange)=\"pageChanged($event)\"\r\n                      maxSize=\"9\"\r\n                      directionLinks=\"true\"\r\n                      autoHide=\"true\"\r\n                      previousLabel=\"Previous\"\r\n                      nextLabel=\"Next\"\r\n                      screenReaderPaginationLabel=\"Pagination\"\r\n                      screenReaderPageLabel=\"page\"\r\n                      screenReaderCurrentLabel=\"You're on page\">\r\n</pagination-controls>\r\n```\r\n\r\n* **`id`** [`string`] If you need to support more than one instance of pagination at a time, set the `id` and ensure it\r\nmatches the id set in the PaginatePipe config.\r\n* **`pageChange`** [`event handler`] The expression specified will be invoked whenever the page changes via a click on one of the\r\npagination controls. The `$event` argument will be the number of the new page. This should be used to update the value of\r\nthe `currentPage` variable which was passed to the `PaginatePipe`.\r\n* **`maxSize`** [`number`] Defines the maximum number of page links to display. Default is `7`.\r\n* **`directionLinks`** [`boolean`] If set to `false`, the \"previous\" and \"next\" links will not be displayed. Default is `true`.\r\n* **`autoHide`** [`boolean`] If set to `true`, the pagination controls will not be displayed when all items in the\r\ncollection fit onto the first page. Default is `false`.\r\n* **`previousLabel`** [`string`] The label displayed on the \"previous\" link.\r\n* **`nextLabel`** [`string`] The label displayed on the \"next\" link.\r\n* **`screenReaderPaginationLabel`** [`string`] The word for \"Pagination\" used to label the controls for screen readers.\r\n* **`screenReaderPageLabel`** [`string`] The word for \"page\" used in certain strings generated for screen readers, e.g. \"Next page\".\r\n* **`screenReaderCurrentLabel`** [`string`] The phrase indicating the current page for screen readers, e.g. \"You're on page <x>\".\r\n\r\n### PaginationControlsDirective\r\n\r\nThe `PaginationControlsDirective` is used to build components for controlling your pagination instances. The directive selector is `pagination-template`, either as an element or an attribute. \r\nIt exports an API named \"paginationApi\", which can then be used to build the controls component.\r\n\r\nIt has the following inputs and outputs:\r\n\r\n```TypeScript\r\n@Input() id: string;\r\n@Input() maxSize: number;\r\n@Output() pageChange: EventEmitter<number>;\r\n```\r\n\r\nHere is an example of how it would be used to build a custom component:\r\n\r\n```HTML\r\n<pagination-template #p=\"paginationApi\"\r\n                     (pageChange)=\"pageChange.emit($event)\">\r\n\r\n        <div class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\">\r\n            <a *ngIf=\"!p.isFirstPage()\" (click)=\"p.previous()\"> < </a>\r\n        </div>\r\n\r\n        <div *ngFor=\"let page of p.pages\" [class.current]=\"p.getCurrent() === page.value\">\r\n            <a (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\r\n                <span>{{ page.label }}</span>\r\n            </a>\r\n            <div *ngIf=\"p.getCurrent() === page.value\">\r\n                <span>{{ page.label }}</span>\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\">\r\n            <a *ngIf=\"!p.isLastPage()\" (click)=\"p.next()\"> > </a>\r\n        </div>\r\n    \r\n</pagination-template>\r\n```\r\n\r\nThe key thing to note here is `#p=\"paginationApi\"` - this provides a local variable, `p` (name it however you like), which can be used in the \r\ntemplate to access the directive's API methods and properties, which are explained below:\r\n\r\n* **`pages`** [`{ label: string, value: any }[]`] Array of page objects containing the page number and label.\r\n* **`maxSize`** [`number`]  Corresponds to the value of `maxSize` which is passed to the directive.\r\n* **`getCurrent()`** [`() => number`] Returns the current page number.\r\n* **`setCurrent(val)`** [`(val: number) => void`] Triggers the `pageChange` event with the page number passed as `val`.\r\n* **`previous()`** [`() => void`] Sets current page to previous, triggering the `pageChange` event.\r\n* **`next()`** [`() => void`] Sets current page to next, triggering the `pageChange` event.\r\n* **`isFirstPage()`** [`() => boolean`] Returns true if the current page is the first page.\r\n* **`isLastPage()`** [`() => boolean`] Returns true if the current page is the last page\r\n* **`getLastPage()`** [`() => number`] Returns the page number of the last page.\r\n\r\nFor a real-world implementation of a custom component, take a look at [the source for the PaginationControlsComponent](/src/pagination-controls.component.ts).\r\n\r\n## Styling\r\n\r\nThe `PaginationControlsComponent` can be styled by simply overriding the default styles. The component does not use view encapsulation, which means you do not need to use operators such as `/deep/` to target it.\r\n\r\nTo avoid specificity issues, just add your own custom class name to the element, which will allow your styles to override the defaults:\r\n\r\n```HTML\r\n// head\r\n<style>\r\n  .my-pagination .ng2-pagination .current {\r\n    background: red;\r\n  }\r\n</style>\r\n\r\n// body\r\n<pagination-controls class=\"my-pagination\"><pagination-controls>\r\n```\r\n\r\n## Server-Side Paging\r\n\r\nIn many cases - for example when working with very large data-sets - we do not want to work with the full collection \r\nin memory, and use some kind of server-side paging, where the server sends just a single page at a time.\r\n\r\nThis scenario is supported by ng2-pagination by using the `totalItems` config option. \r\n\r\nGiven a server response json object like this:\r\n\r\n```\r\n{\r\n  \"count\": 14453,\r\n  \"data\": [\r\n    { /* item 1 */ },\r\n    { /* item 2 */ },\r\n    { /* item 3 */ },\r\n    { /*   ...  */ },\r\n    { /* item 10 */ }\r\n  ]\r\n}\r\n```\r\n\r\nwe should pass the value of `count` to the `PaginatePipe` as the `totalItems` argument:\r\n\r\n```HTML\r\n<li *ngFor=\"let item of collection | paginate: { itemsPerPage: 10, currentPage: p, totalItems: res.count }\">...</li>\r\n```\r\n\r\nThis will allow the correct number of page links to be calculated. To see a complete example of this (including\r\nusing the `async` pipe), see the [demo](http://michaelbromley.github.io/ng2-pagination/).\r\n\r\n## Build\r\n\r\nRequires globally-installed node (tested with v5.x) & npm. \r\n\r\n```\r\nnpm install\r\nnpm run typings:install\r\n\r\nnpm run test // Karma unit tests\r\nnpm run docs:watch // Build the demo/docs app and watch\r\n```\r\n\r\n## License\r\n\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/michaelbromley/ng2-pagination.git"
  },
  "scripts": {
    "build": "npm run build:cjs && npm run build:system",
    "build:cjs": "ngc -p config/tsconfig.cjs.json",
    "build:system": "tsc -p config/tsconfig.system.json",
    "docs:dist": "webpack --config config/webpack.config.js --progress --colors -p --env.prod",
    "docs:watch": "webpack --config config/webpack.config.js --progress --colors --watch",
    "publish-lib": "npm run test && npm run build && npm run docs:dist",
    "test": "karma start config/karma.conf.js",
    "test:watch": "npm run test -- --auto-watch --no-single-run"
  },
  "version": "2.0.1"
}
