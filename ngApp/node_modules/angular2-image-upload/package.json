{
  "_args": [
    [
      {
        "raw": "angular2-image-upload",
        "scope": null,
        "escapedName": "angular2-image-upload",
        "name": "angular2-image-upload",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/asus/HuyLee/myproject/angular2/demo/blog/tutorial/ngApp"
    ]
  ],
  "_from": "angular2-image-upload@latest",
  "_id": "angular2-image-upload@0.6.1",
  "_inCache": true,
  "_location": "/angular2-image-upload",
  "_nodeVersion": "6.9.5",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/angular2-image-upload-0.6.1.tgz_1494380557777_0.5028387536294758"
  },
  "_npmUser": {
    "name": "aberezkin",
    "email": "arkm4n@gmail.com"
  },
  "_npmVersion": "4.5.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "angular2-image-upload",
    "scope": null,
    "escapedName": "angular2-image-upload",
    "name": "angular2-image-upload",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/angular2-image-upload/-/angular2-image-upload-0.6.1.tgz",
  "_shasum": "e6192a417feaffb4f1e2dba630bc1f6482ed5f92",
  "_shrinkwrap": null,
  "_spec": "angular2-image-upload",
  "_where": "/home/asus/HuyLee/myproject/angular2/demo/blog/tutorial/ngApp",
  "author": {
    "name": "Arkadii Berezkin"
  },
  "bugs": {
    "url": "https://github.com/aberezkin/image-upload/issues"
  },
  "dependencies": {},
  "description": "An angular component that uploads images using native browser upload or drag-n-drop.",
  "devDependencies": {
    "@angular/common": "^4.0.0",
    "@angular/compiler": "^4.0.0",
    "@angular/compiler-cli": "^4.0.0",
    "@angular/core": "^4.0.0",
    "@angular/http": "^4.0.0",
    "@angular/language-service": "^4.0.0",
    "@types/core-js": "^0.9.34",
    "rxjs": "^5.0.0-rc.2",
    "typescript": "2.1.5"
  },
  "directories": {},
  "dist": {
    "shasum": "e6192a417feaffb4f1e2dba630bc1f6482ed5f92",
    "tarball": "https://registry.npmjs.org/angular2-image-upload/-/angular2-image-upload-0.6.1.tgz"
  },
  "gitHead": "5f6c9c867eccd42b68c231d8efe9d65b0d5a60cc",
  "homepage": "https://github.com/aberezkin/image-upload#readme",
  "keywords": [
    "image",
    "upload",
    "angular",
    "ng",
    "image",
    "preview",
    "file",
    "upload",
    "drag",
    "drop",
    "drag&drop"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "aberezkin",
      "email": "arkm4n@gmail.com"
    }
  ],
  "name": "angular2-image-upload",
  "optionalDependencies": {},
  "peerDependencies": {
    "@angular/core": "^2.4.9 || ^4.0.0",
    "@angular/common": "^2.4.9 || ^4.0.0",
    "@angular/http": "^2.4.9 || ^4.0.0",
    "rxjs": "^5.0.0-rc.2"
  },
  "readme": "# Image Upload Module\n\nThis angular 2 library provides a light-weight component that handles file-drop, image previewing and image uploading.\n\n### Install\n\n`npm install angular2-image-upload --save`\n\n### Usage\n\nIn your `app.module.ts` import it using `@NgModule` decorator.\n\n    @NgModule({\n        imports: [\n            ...,\n            ImageUploadModule.forRoot(),\n            ...\n        ]\n    })\n\nNow you have `image-upload` declaration and you can use it in your html code.\n\n    <image-upload></image-upload>\n\nYou can use bindings to configure this element for your needs.\n\n#### General customization\n\n`[max]=\"100\"` - is the maximum number of pictures that can be uploaded through this element. Default is 100.\n\n`[url]=\"'example.com/images/upload'\"` - this is the url which can handle POST queries with `multipart/form-data` \nContent-Type. The query has a single field called `image`.\n\n**Note:** images are sent individually one by one!\n\n`[preview]=\"false\"` - you can disable images preview.\n\n`[maxFileSize]=\"1048576\"` - the maximum file size that will be accepted, in bytes. No default (any size permitted).\n\n#### Custom headers\n\nIf you need to send some headers with your request (for example `Authorization` headers), \nyou can use `[headers]` directive like this.\n\n    <image-upload [url]=\"'my-url.com'\"\n      [headers]=\"[\n        {header: 'Authorization', value: 'MyToken'}\n      ]\"></image-upload>\n\n**Note** that headers are sent only if you provide a url.\n\n#### Custom messages\n\n`[buttonCaption]=\"'Select Images'\"` - that is a button caption. Default is \"**Select Images**\". Note that letters on the button are all caps.\n\n`[dropBoxMessage]=\"'Drop your images here!'\"` - this is a message that is shown in drop area. Default is \"**Drop your images here!**\".\n\n`[fileTooLargeMessage]=\"'Image too large!'\"` - message that is shown if the user selects/drops an image that exceeds `maxFileSize`. Default is \"**An image was too large and was not uploaded. The maximum file size is x KiB.**\".\n\n#### Callbacks\n\n`(onFileUploadFinish)=\"imageUploaded($event)\"`. If `[url]` is specified this event is fired when component gets a response from the server, also in this case event has field `serverResponse` which contains the status code and response from the server `{status, response}`. If `[url]` is not specified it's fired immediately after an image(s) dropped into file-drop zone of choosed in file browser. So what you can do, is not specify `[url]` to handle upload yourself, for exapmple send the image into firebase storage. To get file use `event.file`.\n\n`(onRemove)=\"imageRemoved($event)\"` - this event is fired when remove button was clicked and the image preview was removed. *Note that this library doesn't handle deletion from server so you should do it yourself*. Event passed as the argument is the exact same object that was passed to the `(imageUploaded)` callback when image was added so you can access `serverResponse` to get a key to delete your image from server.\n\n`(isPending)=\"disableSendButton($event)\"` - this event is fired when pending state was changed. Event is just a boolean that represents the pending state. Pending state is `true` when and only when component avaits a response from the server, and `false` othervise. You can use it, for example, to disable send button in your form until all images are uploaded.\n\nIn the final state it should look something like this:\n\n    <image-upload\n      [max]=\"100\"\n      [url]=\"'example.com/images/upload'\"\n      [headers]=\"[\n        {header: 'Authorization', value: 'MyToken'}\n      ]\"\n      [buttonCaption]=\"'Select Images!'\"\n      [dropBoxMessage]=\"'Drop your images here!'\"\n      (onFileUploadFinish)=\"imageUploaded($event)\"\n      (onRemove)=\"imageRemoved($event)\"\n      (isPending)=\"disableSendButton($event)\"\n    ></image-upload>\n\n# Contributors\n\n@aberezkin\n@UncleDave\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/aberezkin/ng2-image-upload.git"
  },
  "scripts": {
    "build": "rm -rf lib codegen && ngc -p src",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "0.6.1"
}
